type Room @model {
  id: ID!
  test: Test @connection(name: "RoomTests")
  subjectId: String # could be email
  description: Str
  host: JEUser
  createTime: AWSDateTime
  password: String
  users: [JEUser] @connection(name: "RoomJEUsers") # host & observers
  currentRecord: Record @connection(name: "RoomCurrentRecord") # ID for current Record
  comment: String
}

type JEUser @model {
  id: ID!
  name: String
  room: Room @connection(name: "RoomJEUsers") # after leave the room, must clear the value
  team: Team @connection(name: "TeamJEUsers")
  test: Test @connection(name: "TestJEUsers")
  hostTest: Test @connection(name: "TestHost") # the test this JEUser host
}

type Team @model {
  id: ID!
  name: String
  description: String
  users: [JEUser] @connection(name: "TeamJEUsers")
  questionSet: [QuestionSet] @connection(name: "TeamQuestionSets") # currenly one team has one question set
}

type Test @model {
  id: ID!
  room: Room @connection(name: "RoomTests")
  team: Team
  subjectId: String # could be email
  users: [JEUser] @connection(name: "TestJEUsers") # host & observers
  host: JEUser @connection(name: "TestHost") # ID for current JEUser
  description: String
  timeBegin: AWSDateTime
  timeEnd: AWSDateTime
  records: [Record] @connection(name: "TestRecords")
  status: String! # open/closed
  tags: [String]
  comment: String
}

type Record @model {
  id: ID!
  subjectId: String #could be email
  syncCode: String
  interviewer: JEUser
  timeBegin: AWSDateTime
  timeEnd: AWSDateTime
  status: String # inprogress/closed
  comment:[Comment] @connection(name: "RecordComments")
  history: [History] @connection(name: "RecordHistories")
  ques: QuesSnapshot
  question: QuestionSnapshot @connection(name: "RecordQuestionSnapshot")
  test: Test @connection(name: "TestRecords"),
  room: Room @connection(name: "RoomCurrentRecord")
}

type Comment @model {
  author: String
  time: AWSDateTime
  content: String
  record: Record @connection(name: "RecordComments")
}

type History @model {
  id: ID!
  time: AWSDateTime
  code: String!
  record: Record @connection(name: "RecordHistories")
  snapComments: [SnapComment] @connection(name: "HistorySnapComments")
}

type SnapComment @model {
  id: ID!
  time: AWSDateTime
  author: String
  content: String!
  history: History @connection(name: "HistorySnapComments")
}

type QuesSnapshot {
  type: String # eg. javascript
  name: String
  content: String
  test: String
}

type QuestionSnapshot @model {
  id: ID!
  type: String # eg. javascript
  name: String
  content: String
  test: String
  record: Record @connection(name: "RecordQuestionSnapshot")
}

type QuestionSet @model { #question set for host to pick in a test
  id: ID!
  team: Team @connection(name: "TeamQuestionSets")
  questions: [Question] @connection(name: "QuestionSetQuestions")
  name: String
  description: String
  tags: [String]
}

type Question @model {
  id: ID!
  type: String # eg. javascript
  questionSet: QuestionSet @connection(name: "QuestionSetQuestions")
  name: String
  content: String
  test: String
  tags: [String]
}

type Subscription {
  onUpdateJEUserByJEUserId(id: String): JEUser @aws_subscribe(mutations: ["updateJEUser"])
  onUpdateTeamByTeamId(id: String): Team @aws_subscribe(mutations: ["updateTeam"])
  onUpdateTestByTestId(id: String): Test @aws_subscribe(mutations: ["updateTest"])
  onUpdateRoomByRoomId(id: String): Room @aws_subscribe(mutations: ["updateRoom"])
  onUpdateRecordByRecordId(id: String): Record @aws_subscribe(mutations: ["updateRecord"])
}